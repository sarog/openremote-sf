<?xml version="1.0" encoding="UTF-8"?>

<!--
 **
 * OpenRemote, the Home of the Digital Home.
 * Copyright 2008-2011, OpenRemote Inc.
 *
 * See the contributors.txt file in the distribution for a
 * full listing of individual contributors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 **
-->

<!--
 | JavaBean Bindings
 |
 | Author: Juha Lindfors
 | Author: Dan Cong
 +-->
<beans xmlns = "http://www.springframework.org/schema/beans"
       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop = "http://www.springframework.org/schema/aop"
       xmlns:tx = "http://www.springframework.org/schema/tx"
       xsi:schemaLocation = "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd"
       default-autowire = "byName">
       
  <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      <property name="locations">
        <list>
            <value>classpath:config.properties</value>
            <value>classpath:roundrobin.properties</value>
            <value>classpath:lutron_homeworks.properties</value>
            <value>classpath:russound.properties</value>
          </list>
      </property>
  </bean>

  <bean id="russoundCommands" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	<property name="location">
		<value>classpath:russoundCommands.properties</value>
	</property>
  </bean>

  <!--
  | Configuration variable mapping from controller config.properties file
  | to org.openremote.controller.ControllerConfiguration class.
  |
  | Property names must match to valid accessor methods in the Configuration class.
  | Property values contain the expected property name in config.properties file.
  +-->
  <bean id = "configuration" class = "org.openremote.controller.ControllerConfiguration">
    <property name = "irsendPath" value = "${irsend.path}"/>
    <property name = "lircdconfPath" value = "${lircd.conf.path}"/>
    <property name = "copyLircdconf" value = "${copy.lircd.conf.on}"/>
    <property name = "webappIp" value = "${webapp.ip}" />
    <property name = "webappPort" value = "${webapp.port}"/>
    <property name = "multicastAddress" value = "${multicast.address}"/>
    <property name = "multicastPort" value = "${multicast.port}"/>
    <property name = "resourcePath" value = "${resource.path}"/>
    <property name = "resourceUpload" value = "${resource.upload.enable}"/>
    <property name = "macroIRExecutionDelay" value = "${Macro.IR.Execution.Delay}" />
    <property name = "beehiveRESTRootUrl" value="${beehive.REST.Root.Url}" />
    <property name = "webappName" value="${controller.applicationname}" />
    <property name = "comPort" value = "${com.port}"/>
  </bean>

  <!-- round-robin variables -->
  <bean id="roundRobinConfig" class="org.openremote.controller.RoundRobinConfiguration">
    <property name="isGroupMemberAutoDetectOn" value="${controller.groupmember.autodetect.on}" />
      <property name="roundRobinMulticastAddress" value="${controller.roundrobin.multicast.address}" />
      <property name="roundRobinMulticastPort" value="${controller.roundrobin.multicast.port}" />
      <property name="controllerGroupName" value="${controller.groupname}" />
      <property name="controllerApplicationName" value="${controller.applicationname}" />
      <property name="roundRobinTCPServerSocketPort" value="${controller.roundrobin.tcpserver.port}" />
      <property name="groupMemberCandidateURLs" value="${controller.groupmember.candidate.urls}" />
  </bean>

  <bean id="lutronHomeWorksConfig" class="org.openremote.controller.LutronHomeWorksConfig">
    <property name="userName" value="${lutron_homeworks.username}" />
    <property name="password" value="${lutron_homeworks.password}" />
    <property name="address" value="${lutron_homeworks.address}" />
    <property name="port" value="${lutron_homeworks.port}" />
  </bean>
  
  <bean id="lutronHomeWorksGateway" class="org.openremote.controller.protocol.lutron.LutronHomeWorksGateway"/>

  <bean id="russoundConfiguration" class="org.openremote.controller.RussoundConfiguration">
  	<property name="connectionType" value="${russound.connectionType}" />
  	<property name="comPort" value="${russound.comPort}" />
  	<property name="udpIp" value="${russound.udpIp}" />
  	<property name="udpPort" value="${russound.udpPort}" />
  </bean>
  
    <!-- service for control command from panel -->
    <bean id="controlCommandService" class="org.openremote.controller.service.impl.ControlCommandServiceImpl" />
    
    <!-- controller.xml parser -->
    <bean id = "remoteActionXMLParser"
          class = "org.openremote.controller.command.RemoteActionXMLParser">
    </bean>
    
	<!-- service for file system operation : upload, unzip etc. -->
	<bean id = "fileService"
	      class = "org.openremote.controller.service.impl.FileServiceImpl">
	</bean>

	<!-- profile service -->
    <bean id="profileService" class="org.openremote.controller.service.impl.ProfileServiceImpl" >
    	<property name="configuration" ref="configuration"></property>
    </bean>

    <!-- round-robin service -->
    <bean id="roundRobinService" class="org.openremote.controller.service.impl.RoundRobinServiceImpl" />
    
    <bean id = "servers" class="java.util.concurrent.ConcurrentHashMap" />
    
    <!-- polling machine service -->
    <bean id="pollingMachinesService" class="org.openremote.controller.service.impl.PollingMachinesServiceImpl" />
    
    <!-- service for status command from panel -->
    <bean id="statusCommandService" class="org.openremote.controller.service.impl.StatusCommandServiceImpl" />
    
    <!-- service for listening the status of device -->
    <bean id="statusPollingService" class="org.openremote.controller.service.impl.StatusPollingServiceImpl" />
    
    <bean id = "changedStatusTable" class="org.openremote.controller.statuscache.ChangedStatusTable" />
	
	<bean id = "statusCache" class="org.openremote.controller.statuscache.StatusCache" />
	
	<!-- status cache service -->
  <bean id="statusCacheService" class="org.openremote.controller.service.impl.StatusCacheServiceImpl" >
    <property name="cache" ref="statusCache"></property>
  </bean>

  <bean id="sensorBuilder" class="org.openremote.controller.component.SensorBuilder" />
	
	<!-- controller.xml change service -->
  <bean id = "controllerXMLChangeService" class="org.openremote.controller.service.impl.ControllerXMLChangeServiceImpl" />
	
	<bean id = "controllerXMLListenSharingData" class="org.openremote.controller.config.ControllerXMLListenSharingData" />

  <bean id = "commandFactory" class = "org.openremote.controller.command.CommandFactory">
    <property name = "commandBuilders">
      <props>
        <prop key = "ir">irCommandBuilder</prop>
        <prop key = "knx">knxCommandBuilder</prop>
        <prop key = "x10">x10CommandBuilder</prop>
        <prop key = "socket">tcpSocketCommandBuilder</prop>
        <prop key = "telnet">telnetCommandBuilder</prop>
        <prop key = "http">httpGetCommandBuilder</prop>
        <!-- <prop key = "upnp">upnpCommandBuilder</prop> -->
        <prop key = "virtual">virtualCommandBuilder</prop>
        <prop key = "mockup">mockupCommandBuilder</prop>
        <prop key = "onewire">oneWireCommandBuilder</prop>
        <prop key = "lutron_homeworks">lutronHomeWorksCommandBuilder</prop>
        <prop key = "russound">russoundCommandBuilder</prop>
        <prop key = "udp">udpSocketCommandBuilder</prop>
      </props>
    </property>
  </bean>

	<!-- COMMAND BUILDERS ============================================================================
	 |
	 | Implementation specific builders for the Event Factory bean. In short, each distinct command
	 | type, as they appear in controller.xml, will need a corresponding builder implementation.
	 |
	 | See the org.openremote.controller.command.CommandBuilder interface for details if you seek to
	 | extend the implementation with additional command types.
	 +-->
	
	<!-- Infrared Command Builder -->
	<bean id = "irCommandBuilder" class = "org.openremote.controller.protocol.infrared.IRCommandBuilder"/>
	
	<!-- KNX Command Builder -->
	<bean id = "knxCommandBuilder" class = "org.openremote.controller.protocol.knx.KNXCommandBuilder">
		<constructor-arg index="0" value="${knx.ip.interface.hostname}" />
		<constructor-arg index="1" value="${knx.ip.interface.port}" type="int" />
	</bean>
	
	<!-- TCP Socket Command Builder for IP enabled devices -->
	<bean id = "tcpSocketCommandBuilder" class = "org.openremote.controller.protocol.socket.TCPSocketCommandBuilder"
	      scope = "prototype"/>

	<!-- UDP Socket Command Builder for IP enabled devices -->
	<bean id = "udpSocketCommandBuilder" class = "org.openremote.controller.protocol.socket.UDPSocketCommandBuilder"
	      scope = "prototype"/>
	      
	<!-- X10 Command Builder -->
	<bean id = "x10CommandBuilder" class = "org.openremote.controller.protocol.x10.X10CommandBuilder"/>
	
	<!-- Telnet Command Builder -->
	<bean id = "telnetCommandBuilder" class = "org.openremote.controller.protocol.telnet.TelnetCommandBuilder"
	      scope = "prototype" />
	
	<!-- HTTP GET Command Builder -->
	<bean id = "httpGetCommandBuilder" class = "org.openremote.controller.protocol.http.HttpGetCommandBuilder"
	      scope = "prototype" />

  <!-- 1-wire protocol Command Builder -->
  <bean id = "oneWireCommandBuilder" class = "org.openremote.controller.protocol.onewire.OneWireCommandBuilder"/>
  
  <!-- OpenRemote Virtual Command Builder -->
  <bean id = "virtualCommandBuilder" class = "org.openremote.controller.protocol.virtual.VirtualCommandBuilder"/>

  <!-- Russound Command Builder -->
  <bean id = "russoundCommandBuilder"
        class = "org.openremote.controller.protocol.russound.RussoundCommandBuilder"
        scope = "prototype"/>

  <!-- Universal Plug'n'Play Command Builder -->
  <!--
  <bean id = "upnpCommandBuilder" class = "org.openremote.controller.protocol.upnp.UPnPCommandBuilder"
        scope = "singleton" />
   -->
	<bean id = "mockupCommandBuilder" class = "org.openremote.controller.protocol.test.mockup.MockupCommandBuilder"
	      scope = "prototype" />


	<bean id="lutronHomeWorksCommandBuilder" class = "org.openremote.controller.protocol.lutron.LutronHomeWorksCommandBuilder">
		<property name="gateway" ref="lutronHomeWorksGateway"></property>
	</bean>
	      
	<bean id = "componentFactory" class = "org.openremote.controller.component.ComponentFactory">
		<property name = "componentBuilders">
		    <props>
		        <prop key = "button">buttonBuilder</prop>
		        <prop key = "toggle">toggleBuilder</prop>
		        <prop key = "switch">switchBuilder</prop>
		        <prop key = "label">labelBuilder</prop>
		        <prop key = "slider">sliderBuilder</prop>
		        <prop key = "gesture">gestureBuilder</prop>
		        <prop key = "image">imageBuilder</prop>
		    </props>
		</property>
	</bean>
	
	<!-- UI COMPONENT BUILDERS ============================================================================
	 |
	 | Implementation specific builders for the UI component Factory bean. In short, each distinct command
	 | type, as they appear in controller.xml, will need a corresponding builder implementation.
	 |
	 | See the org.openremote.controller.component.ComponentBuilder interface for details if you seek to
	 | extend the implementation with additional UI component types.
	 +-->
	 
	<!-- Button Builder -->
	<bean id = "buttonBuilder" class = "org.openremote.controller.component.control.button.ButtonBuilder"/>
	
	<!-- Toggle Builder -->
	<bean id = "toggleBuilder" class = "org.openremote.controller.component.control.toggle.ToggleBuilder"/>
	
	<!-- Switch Builder -->
	<bean id = "switchBuilder" class = "org.openremote.controller.component.control.switchtoggle.SwitchBuilder"/>
	
	<!-- Label Builder -->
	<bean id= "labelBuilder" class="org.openremote.controller.component.onlysensory.LabelBuilder" />
	
	<!-- Slider Builder -->
	<bean id= "sliderBuilder" class="org.openremote.controller.component.control.slider.SliderBuilder" />
	
	<!-- Gesture Builder -->
	<bean id= "gestureBuilder" class="org.openremote.controller.component.control.gesture.GestureBuilder" />
	
	<!-- imageBuilder -->
	<bean id="imageBuilder" class="org.openremote.controller.component.onlysensory.ImageBuilder" />

</beans>

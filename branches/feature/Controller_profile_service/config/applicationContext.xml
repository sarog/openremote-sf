<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd"
       default-autowire="byName">

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:config.properties</value>
        </property>
    </bean>
    
    <!-- configuration variables -->
    <bean id="configuration" class="org.openremote.controller.Configuration">
        <property name="irsendPath" value="${irsend.path}" />
        <property name="lircdconfPath" value="${lircd.conf.path}" />
        <property name="copyLircdconf" value="${copy.lircd.conf.on}" />
        <property name="webappIp" value="${webapp.ip}" />
        <property name="webappPort" value="${webapp.port}" />
        <property name="multicastAddress" value="${multicast.address}" />
        <property name="multicastPort" value="${multicast.port}" />
        <property name="resourcePath" value="${resource.path}" />
        <property name="resourceUpload" value="${resource.upload.enable}" />
        <property name="macroIRExecutionDelay" value="${Macro.IR.Execution.Delay}" />
        <property name="roundRobinMulticastAddress" value="${controller.roundrobin.multicast.address}" />
        <property name="roundRobinMulticastPort" value="${controller.roundrobin.multicast.port}" />
        <property name="controllerGroupName" value="${controller.groupname}" />
        <property name="controllerApplicationName" value="${controller.applicationname}" />
        <property name="roundRobinTCPServerSocketPort" value="${controller.roundrobin.tcpserver.port}" />
    </bean>
    
    <!-- service for button command from iPhone -->
    <!-- bean id="buttonCommandService" class="org.openremote.controller.service.impl.ButtonCommandServiceImpl">
        <property name="macroCmdExecutionDelay" value="${Macro.Execution.Delay}" />
    </bean>
-->
    
    <!-- service for status command from iPhone -->
    <bean id="statusCommandService" class="org.openremote.controller.service.impl.StatusCommandServiceImpl" />
    
    <!-- service for listenning the status of control -->
    <bean id="controlStatusPollingService" class="org.openremote.controller.service.impl.ControlStatusPollingServiceImpl" />
    
    <!-- service for control command from iPhone -->
    <bean id="controlCommandService" class="org.openremote.controller.service.impl.ControlCommandServiceImpl" />
    
    <!-- controller.xml parser -->
    <bean id="remoteActionXMLParser" class="org.openremote.controller.command.RemoteActionXMLParser">
    </bean>
    
    <!-- service for file system operation : upload, unzip etc. -->
    <bean id="fileService" class="org.openremote.controller.service.impl.FileServiceImpl">
    </bean>
    
    <!-- status cache service -->
    <bean id="statusCacheService" class="org.openremote.controller.service.impl.StatusCacheServiceImpl" >
    	<property name="cache" ref="statusCache"></property>
    </bean>
	<!-- status cache service -->
    <bean id="profileService" class="org.openremote.controller.service.impl.ProfileServiceImpl" >
    	<property name="configuration" ref="configuration"></property>
    </bean>
    <bean id = "commandFactory" class = "org.openremote.controller.command.CommandFactory">
		<property name = "commandBuilders">
		    <props>
		        <prop key = "ir">irCommandBuilder</prop>
		        <prop key = "knx">knxCommandBuilder</prop>
		        <prop key = "x10">x10CommandBuilder</prop>
            	<prop key = "tcpSocket">tcpSocketCommandBuilder</prop>
            	<prop key = "telnet">telnetCommandBuilder</prop>
            	<prop key = "httpGet">httpGetCommandBuilder</prop>
            	<prop key = "test">testCommandBuilder</prop>
		    </props>
		</property>
	</bean>


	<!-- COMMAND BUILDERS ============================================================================
	 |
	 | Implementation specific builders for the Event Factory bean. In short, each distinct command
	 | type, as they appear in controller.xml, will need a corresponding builder implementation.
	 |
	 | See the org.openremote.controller.command.CommandBuilder interface for details if you seek to
	 | extend the implementation with additional command types.
	 +-->
	
  <!-- Infrared Event Builder -->
  <bean id = "irCommandBuilder" class = "org.openremote.controller.protocol.infrared.IRCommandBuilder"/>

  <!-- KNX Event Builder -->
  <bean id = "knxCommandBuilder" class = "org.openremote.controller.protocol.knx.KNXCommandBuilder"/>

   <!-- TCP Socket Event Builder for IP enabled devices -->
   <bean id = "tcpSocketCommandBuilder" class = "org.openremote.controller.protocol.socket.TCPSocketCommandBuilder"
         scope = "prototype"/>

  <!-- X10 Event Builder -->
  <bean id = "x10CommandBuilder" class = "org.openremote.controller.protocol.x10.X10CommandBuilder"/>

  <bean id = "telnetCommandBuilder" class = "org.openremote.controller.protocol.telnet.TelnetCommandBuilder"
        scope = "prototype" />

  <bean id = "httpGetCommandBuilder" class = "org.openremote.controller.protocol.http.HttpGetCommandBuilder"
        scope = "prototype" />
        
  <bean id = "testCommandBuilder" class = "org.openremote.controller.protocol.test.TestCommandBuilder"
        scope = "prototype" />
        
  <bean id = "controlFactory" class = "org.openremote.controller.control.ControlFactory">
		<property name = "controlBuilders">
		    <props>
		        <prop key = "button">buttonBuilder</prop>
		        <prop key = "toggle">toggleBuilder</prop>
		        <prop key = "switch">switchBuilder</prop>
		        <prop key = "monitor">monitorBuilder</prop>
		        <prop key = "label">labelBuilder</prop>
		        <prop key = "slider">sliderBuilder</prop>
		        <prop key = "gesture">gestureBuilder</prop>
		    </props>
		</property>
  </bean>
  
  <!-- Button Builder -->
  <bean id = "buttonBuilder" class = "org.openremote.controller.control.button.ButtonBuilder"/>

  <!-- Toggle Builder -->
  <bean id = "toggleBuilder" class = "org.openremote.controller.control.toggle.ToggleBuilder"/>
  
  <!-- Switch Builder -->
  <bean id = "switchBuilder" class = "org.openremote.controller.control.switchtoggle.SwitchBuilder"/>
  
  <!-- Monitor Builder -->
  <bean id= "monitorBuilder" class="org.openremote.controller.control.monitor.MonitorBuilder" />
  
  <!-- Label Builder -->
  <bean id= "labelBuilder" class="org.openremote.controller.control.label.LabelBuilder" />
  
  <!-- Slider Builder -->
  <bean id= "sliderBuilder" class="org.openremote.controller.control.slider.SliderBuilder" />
  
  <!-- Gesture Builder -->
  <bean id= "gestureBuilder" class="org.openremote.controller.control.gesture.GestureBuilder" />
  
  
  <bean id = "changedStatusTable" class="org.openremote.controller.statuscache.ChangedStatusTable" />

  <bean id = "statusCache" class="org.openremote.controller.statuscache.StatusCache" />

</beans>

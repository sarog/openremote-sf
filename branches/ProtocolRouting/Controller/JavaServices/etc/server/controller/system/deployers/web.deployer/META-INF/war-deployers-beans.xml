<?xml version="1.0" encoding="UTF-8"?>

<!--
Web application deployers
$Id:$
-->
<deployment xmlns="urn:jboss:bean-deployer:2.0">

   <!-- web.xml parsing deployer -->
   <bean name="WebAppParsingDeployer" class="org.jboss.deployment.WebAppParsingDeployer">
      <property name="type">war</property>
      <property name="relativeOrder">2000</property>
   </bean>
   <bean name="JBossWebAppParsingDeployer" class="org.jboss.deployment.JBossWebAppParsingDeployer">
      <property name="type">war</property>
      <property name="relativeOrder">2001</property>
   </bean>

   <!-- Allow for war local class loaders: in testing -->
   <bean name="WarClassLoaderDeployer" class="org.jboss.web.tomcat.service.deployers.WarClassLoaderDeployer">
      <property name="relativeOrder">-1</property>
      <property name="classLoading"><inject bean="ClassLoading"/></property>
      <property name="system"><inject bean="ClassLoaderSystem"/></property>
      <property name="mbeanServer"><inject bean="JMXKernel" property="mbeanServer"/></property>
      
      <property name="includeWebInfInClasspath">true</property>
      
      <!-- The list of package prefixes that should not be loaded without
         delegating to the parent class loader before trying the web app
         class loader. The packages listed here are those tha are used by
         the web container implementation and cannot be overriden. The format
         is a comma separated list of the package names. There cannot be any
         whitespace between the package prefixes.
         This setting only applies when UseJBossWebLoader=false.
      -->
      <property name="filteredPackages">
         <set>
            <value>javax.servlet</value>
            <value>org.apache.commons.logging</value>
         </set>
      </property>
      
   </bean>
        
    

   <!-- The WebMetaData to service mbean deployer -->
   <bean name="WarDeployer" class="org.jboss.web.tomcat.service.deployers.TomcatDeployer">
      <!-- Inject the MainDeployer for resolving cross deployment refs -->
      <property name="mainDeployer"><inject bean="MainDeployer" /></property>
      <property name="type">war</property>
      <!-- You can configure a set of authenticators keyed by http-auth method
      used. This will apply the same set of authenticators across all web
      applications. You can override the set of authenticators at the web
      application level by adding <authenticators> element to the respective
      jboss-web.xml
      -->      
      <property name="authenticators">
         <map class="java.util.Properties" keyClass="java.lang.String" valueClass="java.lang.String">
            <entry>
               <key>BASIC</key>
               <value>org.apache.catalina.authenticator.BasicAuthenticator</value>
            </entry>
            <entry>
               <key>CLIENT-CERT</key>
               <value>org.apache.catalina.authenticator.SSLAuthenticator</value>
            </entry>
            <entry>
               <key>DIGEST</key>
               <value>org.apache.catalina.authenticator.DigestAuthenticator</value>
            </entry>
            <entry>
               <key>FORM</key>
               <value>org.apache.catalina.authenticator.FormAuthenticator</value>
            </entry>
            <entry>
               <key>NONE</key>
               <value>org.apache.catalina.authenticator.NonLoginAuthenticator</value>
            </entry>
         </map>         
      </property>
      
      <!-- The JAAS security domain to use in the absense of an explicit
      security-domain specification in the war WEB-INF/jboss-web.xml
      -->
      <property name="defaultSecurityDomain">java:/jaas/jboss-web-policy</property>

      <!-- Get the flag indicating if the normal Java2 parent first class
           loading model should be used over the servlet 2.3 web container first
           model.
      -->
      <property name="java2ClassLoadingCompliance">false</property>
      <!-- A flag indicating if the JBoss Loader should be used. This loader
           uses a unified class loader as the class loader rather than the tomcat
           specific class loader.
           The default is false to ensure that wars have isolated class loading
           for duplicate jars and jsp files.
      -->
      <property name="useJBossWebLoader">false</property>
      <!-- The list of package prefixes that should not be loaded without
         delegating to the parent class loader before trying the web app
         class loader. The packages listed here are those tha are used by
         the web container implementation and cannot be overriden. The format
         is a comma separated list of the package names. There cannot be any
         whitespace between the package prefixes.
         This setting only applies when UseJBossWebLoader=false.
      -->
      <property name="filteredPackages">javax.servlet,org.apache.commons.logging</property>

      <property name="lenientEjbLink">true</property>

      <!--Flag to delete the Work Dir on Context Destroy -->
      <property name="deleteWorkDirOnContextDestroy">false</property>


      <!-- The class used as the deployment wrapper -->
      <property name="deploymentClass">org.jboss.web.tomcat.service.deployers.TomcatDeployment</property>

      <!-- The name of the request property under with the authenticated JAAS
      Subject is stored on successful authentication. If null or empty then
      the Subject will not be stored.
      -->
      <!--
      <property name="subjectAttributeName">j_subject</property>
      -->

      <!-- The SessionIdAlphabet is the set of characters used to create a session Id
           It must be made up of exactly 65 unique characters
      <property name="sessionIdAlphabet">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-_</property>
      -->
      
      <property name="domain">jboss.web</property>
      <property name="securityManagerService">
         <inject bean="jboss.security:service=JaasSecurityManager" />
      </property>

       <!-- Specify a SecurityManagement Wrapper -->
       <property name="securityManagement">
         <inject bean="JNDIBasedSecurityManagement"/>
       </property>

       <!-- Specify a SecurityContext FQN class name -->
       <property name="securityContextClassName">org.jboss.security.plugins.JBossSecurityContext</property> 
      
      <depends>SecurityDeployer</depends>
   </bean>

</deployment>

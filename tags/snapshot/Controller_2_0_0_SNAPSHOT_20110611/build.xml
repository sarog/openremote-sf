<?xml version="1.0" encoding="UTF-8"?>

<!--
  OpenRemote, the Home of the Digital Home.
  Copyright 2008-2011, OpenRemote Inc.

  See the contributors.txt file in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as
  published by the Free Software Foundation; either version 3.0 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  You should have received a copy of the GNU General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<!--
 |  Build file for OpenRemote controller
 |
 |  Author: Dan Cong
 |  Author: Juha Lindfors
 |  Author: Jerome Velociter
 +-->
<project name = "controller" default = "run-test" basedir = ".">
  <property file = "build.properties"/>
  <property file = "config/config.properties"/>
  <!-- some variables used -->
  <property name = "project.name" value = "controller"/>
  <property name = "src.dir" value = "src"/>
  <property name = "test.dir" value = "test"/>
  <property name = "lib.dir" value = "lib"/>
  <property name = "build.dir" value = "build"/>
  <property name = "output.dir" value = "output"/>
  <property name = "javadoc.dir" value = "doc"/>
  <property name = "javadoc.locale" value = "en_US"/>
  <property name = "build-config.dir" value = "build_config"/>
  <property name = "config.dir" value = "config"/>
  <property name = "classes.dir" value = "build/classes"/>
  <property name = "webapp.classes.dir" value = "web/WEB-INF/classes"/>
  <property name = "instrumented.dir" value = "build/instrumented"/>
  <property name = "junit.reports.dir" location = "build/junit_report"/>
  <property name = "checkstyle.reports.dir" location = "build/checkstyle_report"/>
  <property name = "cobertura.report.dir" location = "build/cobertura_report"/>
  <property name = "cobertura.datafile" value = "${build.dir}/cobertura.ser"/>
  <property name = "version" value = "0.1-SNAPSHOT"/>
  <property name = "sql.dir" value = "sql"/>

  <!-- paths used for compilation and run  -->
  <path id = "compile.path.id">
    <fileset dir = "${lib.dir}/compile"/>
    <fileset dir = "${lib.dir}/core" includes = "**/*.jar"/>
    <fileset dir = "${lib.dir}/rxtx"/>
    <fileset dir = "${lib.dir}/apache/commons-net"/>
    <fileset dir = "${lib.dir}/apache/commons-lang"/>
    <fileset dir = "${lib.dir}/clink"/>
  	<fileset dir = "${lib.dir}/json"/>
    <fileset dir = "${lib.dir}/onewire"/>
    <path location = "${classes.dir}"/>
  </path>
  
  <path id = "test.path.id">
    <fileset dir = "${lib.dir}/compile"/>
    <fileset dir = "${lib.dir}/core" includes = "**/*.jar"/>
    <fileset dir = "${lib.dir}/cobertura" includes = "*.jar"/>
    <fileset dir = "${lib.dir}/clink" includes = "*.jar"/>
  	<fileset dir = "${lib.dir}/json" includes = "*.jar"/>
    <path location = "${classes.dir}"/>
    <path location = "${test.dir}"/>
    <fileset dir = "${lib.dir}/test" includes = "**/*.jar"/>
    <path location = "${config.dir}"/>
    <fileset dir = "${lib.dir}/apache" includes = "**/*.jar"/>
    <fileset dir = "${lib.dir}/onewire"/>
  </path>

  <path id = "container.libs">
    <path location = "${test.dir}"/>
    <fileset dir = "${lib.dir}/compile"/>
    <fileset dir = "${lib.dir}/core" includes = "**/*.jar"/>
    <fileset dir = "${lib.dir}/cobertura" includes = "*.jar"/>
    <fileset dir = "${lib.dir}/clink" includes = "*.jar"/>
    <path location = "${classes.dir}"/>
    <fileset dir = "${lib.dir}/test" includes = "**/*.jar"/>
    <path location = "${config.dir}"/>
    <fileset dir = "${lib.dir}/apache" includes = "**/*.jar"/>
  </path>


  <path id = "cobertura.path.id">
    <fileset dir = "${lib.dir}/cobertura" includes = "*.jar"/>
    <path location = "${classes.dir}"/>
  </path>

  <!-- defind task for cobertura -->
  <taskdef classpathref = "cobertura.path.id" resource = "tasks.properties"/>

  <!-- defind task for checkstyle -->
  <taskdef resource = "checkstyletask.properties" classpathref = "test.path.id"/>
  <property name = "checkstyle.report.style" value = "${build-config.dir}/checkstyle-noframes-sorted.xsl"/>

  
  <!--
    | CLEAN:
    |
    | Cleans up the output directory for this project.
    +-->
  <target name = "clean" description = "delete folder">
    <delete dir = "${build.dir}"/>
    <delete dir = "${output.dir}"/>
    <delete dir = "${webapp.classes.dir}" />
  </target>

  <!--
  |
  | INIT:
  |
  | Make directory for this project.
  +-->
  <target name = "init" depends = "clean" description = "create folder">
    <mkdir dir = "${build.dir}"/>
    <mkdir dir = "${output.dir}"/>
    <copy todir = "${build.dir}/lib" flatten = "true">
      <fileset dir = "${lib.dir}/core">
        <include name = "**/*.jar"/>
      </fileset>
      <fileset dir = "${lib.dir}/apache">
        <include name = "**/*.jar"/>
      </fileset>
      <fileset dir = "${lib.dir}/rxtx">
        <include name = "**/*.jar"/>
      </fileset>
      <fileset dir = "${lib.dir}/json">
    	<include name = "*.jar"/>
      </fileset>
      <fileset dir = "${lib.dir}/onewire">
        <include name = "*.jar"/>
      </fileset>
    </copy>
    <copy todir = "${build.dir}/lib/native" flatten = "true">
      <fileset dir = "${lib.dir}/rxtx">
        <include name = "**/*.dll"/>
        <include name = "**/*.so"/>
        <include name = "**/*.jnilib"/>
      </fileset>
    </copy>    
  </target>

  <!--
    | COMPILE:
    |
    | Run javac on all Java source.
    +-->
  <target name = "compile" depends = "init" description = "--> compile the source.">
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = " Compiling Java classes..."/>
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = ""/>
    <mkdir dir = "${classes.dir}"/>
    <copy todir = "${classes.dir}">
      <fileset dir = "${config.dir}">
        <include name = "**.*"/>
      </fileset>
      <fileset dir = "${src.dir}">
        <include name = "**/*.xml"/>
      </fileset>
    </copy>

		<copy todir = "${webapp.classes.dir}">
			<fileset dir = "${classes.dir}">
				<include name = "**.*" />
			</fileset>
		</copy>

		<copy todir="${classes.dir}">
			<fileset dir="${test.dir}">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
			<fileset dir="${test.dir}">
				<include name="**/*.xml" />
			</fileset>
 		</copy>
    
    <javac destdir = "${classes.dir}" classpathref = "compile.path.id" debug = "${build.debug}">
      <src path = "${src.dir}"/>
    </javac>
  </target>


  <!--
    | SCHEMA:
    |
    | Initialize the database schema only for test.
    +-->
  <target name = "schema" description = "test fixture">
    <sql driver = "com.mysql.jdbc.Driver" url = "${jdbc.url.test}" userid = "${jdbc.username.test}"
         password = "${jdbc.password.test}" delimiter = ";" onerror = "continue">
      <classpath>
        <path refid = "compile.path.id"/>
      </classpath>
      <fileset dir = "${sql.dir}">
        <include name = "test.sql"/>
      </fileset>
    </sql>
  </target>


  <!--
    | COMPILE-TEST:
    |
    | Compile the test.
    +-->
  <target name = "compile-test" depends = "compile" description = "--> compile the test cases.">
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = " Compiling test..."/>
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = ""/>
    <copy todir = "${classes.dir}">
      <fileset dir = "${test.dir}">
        <include name = "**/*.xml"/>
      </fileset>
    </copy>
    <javac srcdir = "${test.dir}" destdir = "${classes.dir}" classpathref = "test.path.id" debug = "true" />
  </target>

  <!--
    | WAR:
    |
    | Pack the war.
    +-->
  <target name = "war" depends = "compile" description = "package application to war">
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = " Packing war..."/>
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = ""/>
    <war warfile = "${output.dir}/${project.name}.war" webxml = "web/WEB-INF/web.xml">
      <fileset dir = "web">
        <exclude name = "WEB-INF/classes/**/*.*"/>
        <exclude name = "WEB-INF/lib/**/*.*"/>
      </fileset>
      <fileset dir = ".">
        <include name = "readme.txt"/>
      </fileset>
      <lib dir = "${build.dir}/lib"/>
      <lib dir = "${lib.dir}/clink"/>
      <classes dir = "${classes.dir}"/>
    </war>
  </target>

  <!--
    | JAVADOC:
    |
    | Run the javadoc.
    +-->
  <target name = "javadoc" description = "Generate API docs for the DocCheck source">
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = " Generating javadoc..."/>
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = ""/>
    <mkdir dir = "${javadoc.dir}"/>
    <javadoc
        locale = "${javadoc.locale}"
        defaultexcludes = "yes"
        use = "yes"
        header = "OpenRemote Controller API"
        doctitle = "OpenRemote Controller API Specification V2.0"
        nodeprecatedlist = "yes"
        classpathref = "compile.path.id"
        sourcepath = "./${src.dir}"
        destdir = "./${javadoc.dir}"
        packagenames = "org.openremote.controller.*"
        additionalparam = "-breakiterator"
        />
  </target>

 	<!--
 	 | TEST-COVERAGE:
 	 |
 	 | Run the test with cobertura.
 	 +-->
 	<target name = "test-cov"  description = "--> run the test cases.">
 		<echo message = "--------------------------------------------------------------------" />
 		<echo message = " Running test..." />
 		<echo message = "--------------------------------------------------------------------" />
 		<echo message = "" />
 		<property name = "test.targetclasspath" value = "${classes.dir}" />
 		<parallel>
      <java classname = "org.openremote.controller.jetty.JettyStart" classpathref = "test.path.id" fork = "true" />
 			<sequential>
 				<waitfor>
 					<socket server = "127.0.0.1" port = "8090" />
 				</waitfor>
 				<antcall target = "testsuite" />
 				<java classname = "org.openremote.controller.jetty.JettyStop" classpathref = "test.path.id" />
 			</sequential>
 		</parallel>
 	</target>




  <!--
   |
   |
   | .
   +-->
  <target name = "run"  description = "--> .">
    <echo message = "--------------------------------------------------------------------" />
    <echo message = " Starting Container..." />
    <echo message = "--------------------------------------------------------------------" />
    <echo message = "" />
    <property name = "test.targetclasspath" value = "${classes.dir}" />
    <parallel>
     <java classname = "org.openremote.controller.jetty.JettyStart" classpathref = "container.libs" fork = "true" />
    </parallel>
  </target>




  <!--
    | RUN-TEST:
    |
    | Run the test.
    +-->
  <target name = "run-test" depends = "compile-test" description = "--> run the test cases.">
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = " Running test..."/>
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = ""/>
    <property name="test.targetclasspath" value="${classes.dir}" />
    <parallel>
      <java classname="org.openremote.controller.jetty.JettyStart" classpathref="test.path.id" fork="true" />
      <sequential>
        <waitfor>
          <socket server="127.0.0.1" port="8090" />
        </waitfor>
        <antcall target="testsuite" />
        <java classname="org.openremote.controller.jetty.JettyStop" classpathref="test.path.id" />
      </sequential>
    </parallel>
  </target>


  <!--
    | TEST:
    |
    | JUnit test.
    +-->
  <target name = "test" description = "junit test">
    <delete includeemptydirs = "true" dir = "${junit.reports.dir}"/>
    <mkdir dir = "${junit.reports.dir}"/>
    <junit dir = "${basedir}" fork = "true" showoutput = "true" failureproperty = "tests.failed">
      <sysproperty key = "net.sourceforge.cobertura.datafile" file = "${cobertura.datafile}"/>
      <classpath location = "${test.targetclasspath}"/>
      <classpath location = "${classes.dir}"/>
      <classpath refid = "test.path.id">
      </classpath>
      <formatter type = "xml"/>
      <batchtest todir = "${junit.reports.dir}">
        <fileset dir = "${test.dir}">
          <include name = "**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir = "${junit.reports.dir}">
      <fileset dir = "${junit.reports.dir}">
        <include name = "TEST-*.xml"/>
      </fileset>
      <report format = "frames" todir = "${junit.reports.dir}"/>
    </junitreport>
    <fail if = "tests.failed"/>
  </target>

  <!--
   | TEST:
   |
   | JUnit test suite.
   +-->

  <target name="testsuite" description="Running Test Suite">
    <delete includeemptydirs="true" dir="${junit.reports.dir}" />
    <mkdir dir="${junit.reports.dir}" />
    <junit printsummary="yes" haltonfailure="no" fork="yes" maxmemory="512m">
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />
      <classpath location="${test.targetclasspath}" />
      <classpath location="${classes.dir}" />
      <classpath refid="test.path.id">
      </classpath>
      <sysproperty key="ant.home" value="${ant.home}" />
      <formatter type="xml" />
      <batchtest fork="yes" todir="${junit.reports.dir}">

        <fileset dir="${classes.dir}" includes="**/AllTests.class" />
      </batchtest>
    </junit>
    <junitreport todir="${junit.reports.dir}">
      <fileset dir="${junit.reports.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${junit.reports.dir}" />
    </junitreport>
    <fail if="tests.failed" />
  </target>

  
  <!--
    | DEPLOY:
    |
    | Deploy the project to a directory.
    +-->
  <target name = "deploy" depends = "war" description = "--> deploy the project">
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = " Deploying project..."/>
    <echo message = "--------------------------------------------------------------------"/>
    <echo message = ""/>
    <delete file = "${deploy.dir}/controller.war"/>
    <delete dir = "${deploy.dir}/controller"/>
    <copy todir = "${deploy.dir}" file = "${output.dir}/${project.name}.war"/>
  </target>

  <!--
    | COBERTURA_INSTRUMENT:
    |
    | Make instrument for cobertura.
    +-->
  <target name = "cobertura_instrument" depends = "compile-test"
          description = "add log info in class files">
    <delete file = "${cobertura.datafile}"/>
    <cobertura-instrument todir = "${instrumented.dir}" datafile = "${cobertura.datafile}">
      <ignore regex = "org.apache.log4j.*"/>
      <ignore regex="org.openremote.controller.jetty.*"/>
			<ignore regex="org.openremote.controller.suite.*"/>
      <fileset dir = "${classes.dir}">
        <include name = "**/*.class"/>
        <exclude name="**/Jetty*.class"/>
        <exclude name = "**/*Test.class"/>
        <exclude name="**/*Tests.class"/>
      </fileset>
    </cobertura-instrument>
  </target>

  <!--
    | REPORT-COBERTURA:
    |
    | Generate the cobertura report.
    +-->
  <target name = "report-cobertura" depends = "cobertura_instrument"
          description = "--> generate the coverage report.">
    <property name = "test.targetclasspath" value = "${instrumented.dir}"/>
    <antcall target = "test-cov"/>
    <delete includeemptydirs = "true" dir = "${cobertura.report.dir}"/>
 		<cobertura-report format = "html" destdir = "${cobertura.report.dir}"
                      srcdir = "${src.dir}" datafile = "${cobertura.datafile}" />
		<cobertura-report format = "xml" destdir = "${cobertura.report.dir}"
                      srcdir = "${src.dir}" datafile = "${cobertura.datafile}"/>
    <delete file = "operation.log" failonerror = "false"/>
    <delete file = "exception.log" failonerror = "false"/>
  </target>

  
  <!--
    | REPORT-CHECKSTYLE:
    |
    | Generate the checkstyle report.
    +-->
  <target name = "report-checkstyle"
          description = "--> generates a report of code convention violations.">
    <mkdir dir = "${checkstyle.reports.dir}"/>
    <checkstyle config = "${build-config.dir}/openremote_checks.xml"
                failureProperty = "checkstyle.failure"
                failOnViolation = "false">
      <formatter type = "xml" tofile = "${checkstyle.reports.dir}/checkstyle_report.xml"/>
      <fileset dir = "${src.dir}" includes = "**/*.java"/>
      <fileset dir = "${test.dir}" includes = "**/*.java"/>
    </checkstyle>
    <xslt in = "${checkstyle.reports.dir}/checkstyle_report.xml"
          out = "${checkstyle.reports.dir}/checkstyle.report.html"
          style = "${checkstyle.report.style}" />
  </target>

</project>

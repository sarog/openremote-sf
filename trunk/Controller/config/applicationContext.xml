<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd"
       default-autowire="byName">

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:config.properties</value>
        </property>
    </bean>
    
    <!-- configuration variables -->
    <bean id="configuration" class="org.openremote.controller.Configuration">
        <property name="irsendPath" value="${irsend.path}" />
        <property name="lircdconfPath" value="${lircd.conf.path}" />
        <property name="copyLircdconf" value="${copy.lircd.conf.on}" />
        <property name="webappPort" value="${webapp.port}" />
        <property name="multicastAddress" value="${multicast.address}" />
        <property name="multicastPort" value="${multicast.port}" />
        <property name="resourcePath" value="${resource.path}" />
    </bean>
    
    <!-- service for button command from iPhone -->
    <bean id="buttonCommandService" class="org.openremote.controller.service.impl.ButtonCommandServiceImpl">
        <property name="macroCmdExecutionDelay" value="${Macro.Execution.Delay}" />
    </bean>
    
    <!-- controller.xml parser -->
    <bean id="remoteActionXMLParser" class="org.openremote.controller.event.RemoteActionXMLParser">
    </bean>
    
    <!-- service for file system operation : upload, unzip etc. -->
    <bean id="fileService" class="org.openremote.controller.service.impl.FileServiceImpl">
    </bean>




  <bean id = "eventFactory" class = "org.openremote.controller.event.EventFactory">
		<property name = "eventBuilders">
		    <props>
		        <prop key = "irEvent">irEventBuilder</prop>
		        <prop key = "knxEvent">knxEventBuilder</prop>
		        <prop key = "x10Event">x10EventBuilder</prop>
            <prop key = "tcpSocketEvent">tcpSocketEventBuilder</prop>
            <prop key = "telnetEvent">telnetEventBuilder</prop>
            <prop key = "httpGetEvent">httpGetEventBuilder</prop>
		    </props>
		</property>
	</bean>


	<!-- EVENT BUILDERS ============================================================================
	 |
	 | Implementation specific builders for the Event Factory bean. In short, each distinct event
	 | type, as they appear in controller.xml, will need a corresponding builder implementation.
	 |
	 | See the org.openremote.controller.event.EventBuilder interface for details if you seek to
	 | extend the implementation with additional event types.
	 +-->
	
  <!-- Infrared Event Builder -->
  <bean id = "irEventBuilder" class = "org.openremote.controller.protocol.infrared.IREventBuilder"/>

  <!-- KNX Event Builder -->
  <bean id = "knxEventBuilder" class = "org.openremote.controller.protocol.knx.KNXEventBuilder"/>

   <!-- TCP Socket Event Builder for IP enabled devices -->
   <bean id = "tcpSocketEventBuilder" class = "org.openremote.controller.protocol.socket.TCPSocketEventBuilder"
         scope = "prototype"/>

  <!-- X10 Event Builder -->
  <bean id = "x10EventBuilder" class = "org.openremote.controller.protocol.x10.X10EventBuilder"/>

  <bean id = "telnetEventBuilder" class = "org.openremote.controller.protocol.telnet.TelnetEventBuilder"
        scope = "prototype" />

  <bean id = "httpGetEventBuilder" class = "org.openremote.controller.protocol.http.HttpGetEventBuilder"
        scope = "prototype" />

</beans>

<?xml version="1.0" encoding="UTF-8"?>

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.openremote.org" targetNamespace="http://www.openremote.org">

    <xsd:annotation>
		<xsd:documentation><![CDATA[
			OpenRemote Controller XML Schema, version 2.0.
			Authors:Dan Cong, Javen Zhang.
						
			This defines the following:
			
			1. device component: such as a switch or a slider... whose id is consistent with the one in panel.xml
			2. status sensor : used to do polling to get current status of a device
			3. device command: such as "TV on", support different device command protocal (IR, X10, KNX ...)
			
		]]></xsd:documentation>
	</xsd:annotation>
	<!-- Top-level <openremote> tag -->
	<xsd:element name="openremote">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
	The top level (typically root) element. Allows the definition
	of the different components, sensors, commands.
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="components" />
				<xsd:element ref="sensors" />
				<xsd:element ref="commands" />
				<xsd:element ref="config" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="components">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
					a component collection, it can include some components such as button, switch, gesture, label etc...
				]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:group ref="componentGroup" minOccurs="0" maxOccurs="unbounded"></xsd:group>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="sensors">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
					a sensor collection, it contains all sensors.
				]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="sensor" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	
	<xsd:element name="commands">
        <xsd:annotation>
        	<xsd:documentation><![CDATA[
				The parent element of command. include all the command definitions
			]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="command" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:simpleType name="idType">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
				The unique identifier type. 				
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:int">
			<xsd:minInclusive value="1"/>
		</xsd:restriction>
	</xsd:simpleType>
	
		
	<!-- ###############  component attr group  ################ -->
	
	<xsd:group name="componentGroup">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					a component definition-group.
				]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice>
			<xsd:element ref="switch" />
			<xsd:element ref="slider"/>
			<xsd:element ref="button"/>
			<xsd:element ref="label" />
			<xsd:element ref="gesture" />
			<xsd:element ref="image"/>
			<xsd:element ref="web" />			
		</xsd:choice>
	</xsd:group>
	
	<!-- ###############  sensor  ################ -->

	<xsd:element name="sensor">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
			the definition of a sensor. sensor is used to listen the status change of a screen component.
			it describes:
			
			1) how many states a screen component has
			2) what kind of state a screen component can return.
			3) the min/max value of the states when the state is a continuous range.
			4) which command is used to get status. 
			
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:group ref="sensorGroup" minOccurs="0" maxOccurs="unbounded" />
			</xsd:sequence>
			<xsd:attribute name="id" type="idType" use="required" />
			<xsd:attribute name="type" type="sensorType" use="required" />
			<xsd:attribute name="name" type="xsd:string" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<xsd:group name="sensorGroup">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					a sensor definition-group.
				]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice>
			<xsd:element ref="include" minOccurs="0" maxOccurs="unbounded" />
			<xsd:element ref="state" minOccurs="0" maxOccurs="unbounded" />
			<xsd:element ref="min" minOccurs="0" maxOccurs="1" />
			<xsd:element ref="max" minOccurs="0" maxOccurs="1" />
		</xsd:choice>
	</xsd:group>

	<xsd:element name="min">
		<xsd:complexType>
			<xsd:attribute name="value" type="xsd:int" use="required" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="max">
		<xsd:complexType>
			<xsd:attribute name="value" type="xsd:int" use="required" />
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="state">
		<xsd:complexType>
			<xsd:attribute name="name" use="required" />
			<xsd:attribute name="value" use="optional" />
		</xsd:complexType>
	</xsd:element>
	
	<xsd:simpleType name="sensorType">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					Sensor Type is used to define the sensor data type comes back with 'rest/status' or 'rest/polling' API.
					
					1) switch: sensor data is either 'on' or 'off' as a string.
					2) level: sensor data is a percent number, it expects an integer value as a string in the range of [0-100]
					3) range: sensor data is a float number between min value and max value, it expects a float value as a string in the range of [min-max]
					4) color: sensor data is color string.
					5) custom: sensor data is custom enumeration string.
				]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="switch" />
			<xsd:enumeration value="level" />
			<xsd:enumeration value="range" />
			<xsd:enumeration value="color" />
			<xsd:enumeration value="custom" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<!-- ###############  command  ################ -->
	
	<xsd:element name="command">
        <xsd:annotation>
        	<xsd:documentation><![CDATA[
			the definition of a device command. the command must have id , protocol.  
			]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
	        <xsd:sequence>
	        		<xsd:element ref="property" minOccurs="0" maxOccurs="unbounded"/>
	        </xsd:sequence>
				<xsd:attribute name="id" type="idType" use="required" />
				<xsd:attribute name="protocol" type="xsd:string" use="required"/>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="property">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
				describes the name-value pair for command.
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="name" type="xsd:string" use="required" />
			<xsd:attribute name="value" type="xsd:string" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<!-- ###############  switch  ################ -->
	
	<xsd:element name="switch">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					The switch has two states: ON/OFF. it can include many commands.
				]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="on" minOccurs="1" maxOccurs="1"/>
				<xsd:element ref="off" minOccurs="1" maxOccurs="1" />
				<xsd:element ref="include" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
			<xsd:attribute name="id" type="idType" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="on">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					The "on" status of a switch
				]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
        <xsd:group ref = "macroElement" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="off">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					The "off" status of a switch
				]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
        <xsd:group ref = "macroElement" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<!-- ###############  slider  ################ -->
	
	<xsd:element name="slider">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="setValue" minOccurs="0" maxOccurs="unbounded"/>
				<xsd:element ref="include" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
			<xsd:attribute name="id" type="idType" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="setValue">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					defines how to set value of slider by using a command.
				]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="include" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<!-- ###############  button  ################ -->
	
  <xsd:element name = "button">
    <xsd:annotation>
      <xsd:documentation><![CDATA[

          A button component is a simple one-way component to send write commands to a device.
          Commands might be sent for different event occuring on the buttons,
          currently supported are: press, shortRelease, longPress, longRelease
          For each event, a macro encapsulates the commands to be sent.
        
          A button component must have a controller unique integer identifier.

          An example button element is as follows:

            <components>
              <button id = "nnn">
                <macro commandParam="press">      
			            <include type = "command" ref = "nnn" />
			            <include type = "command" ref = "nnn" />
			            <delay>500</delay>
			            <include type = "command" ref = "nnn" />
                </macro>
              </button>
		          ...
		        </components>

      ]]></xsd:documentation>
    </xsd:annotation>

    <xsd:complexType>
      <xsd:sequence>
        <xsd:element ref = "macro" minOccurs = "0" maxOccurs = "4"/>
      </xsd:sequence>
      <xsd:attribute name = "id" type = "idType" use = "required" />
    </xsd:complexType>
  </xsd:element>
  	
	<!-- ###############  label  ################ -->
	
	<xsd:element name="label">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="include" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
			<xsd:attribute name="id" type="idType" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<!-- ###############  image  ################ -->
	
	<xsd:element name="image">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="include" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
			<xsd:attribute name="id" type="idType" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<!-- ###############  web  ################ -->
	
	<xsd:element name="web">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="include" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
			<xsd:attribute name="id" type="idType" use="required" />
		</xsd:complexType>
	</xsd:element>	
	<!-- ###############  gesture  ################ -->
	
	<xsd:element name="gesture">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="include" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
			<xsd:attribute name="id" type="idType" use="required" />
		</xsd:complexType>
	</xsd:element>
	
	<!-- ###############  include  ################ -->
	
	<xsd:element name="include">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					you can use this element to reference a command by using type="command", 
					or a sensor by using type="sensor"
				]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="type" type="xsd:string" ></xsd:attribute>
			<xsd:attribute name="ref" type="idType"></xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- ###############  delay  ################ -->
	
	<xsd:element name="delay" type="xsd:int" >
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					defines the time (millisecond) it will delay when executing a series of commands in macro.
				]]>
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
  <!--
  ================================================================================================

    Macro definition.

  ================================================================================================
  -->
  <xsd:element name = "macro">
    <xsd:annotation>
      <xsd:documentation><![CDATA[
        
          The macro element is used in buttons to define the set of executable commands,
          grouped by the event type.
        
          One or more commands may be sent in sequence, and delays can be used where necessary
          between commands.
        
        ]]></xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:group ref = "macroElement" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name = "commandParam" type = "xsd:string" use = "required" />
    </xsd:complexType>
  </xsd:element>

  <!--
  =================================================================================================

    Macro group definition.

  =================================================================================================
  -->
  <xsd:group name = "macroElement">
    <xsd:annotation>
      <xsd:documentation><![CDATA[

          A macro element defines the possibile executable commands a sequence of executation can be built of,
          this includes commands and delays.
        
      ]]></xsd:documentation>
    </xsd:annotation>

    <xsd:choice>
      <xsd:element ref = "delay"/>
      <xsd:element ref = "include"/>
    </xsd:choice>
  </xsd:group>
	
	<!-- ###############  cotroller configuraiton  ################ -->
	<xsd:element name="config">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
					These configurations are used to override default system configurations of Controller for Building Modeler.
					That means custom configurations won't be used by Controller by default, because Controller won't know there's such configuration.
				]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="property" minOccurs="0" maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
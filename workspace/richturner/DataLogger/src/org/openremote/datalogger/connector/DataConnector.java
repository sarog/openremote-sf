/* OpenRemote, the Home of the Digital Home.
* Copyright 2008-2014, OpenRemote Inc.
*
* See the contributors.txt file in the distribution for a
* full listing of individual contributors.
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/
package org.openremote.datalogger.connector;

import java.util.Date;
import java.util.Set;

import org.openremote.datalogger.exception.DataConnectorException;
import org.openremote.datalogger.exception.DataSecurityException;
import org.openremote.datalogger.model.SensorOutputValue;
import org.openremote.datalogger.model.SensorValue;

/**
 * This is the interface for all Data Connectors.
 * It delegates user authentication and data storage/retrieval to the connector.
 * 
 * @author <a href="mailto:richard@openremote.org">Richard Turner</a>
 *
 */
public interface DataConnector {
	/**
	 * Initialise the data connector - this will only be called once at startup	
	 * @throws DataConnectorException
	 */
	void init() throws DataConnectorException;
	
	/**
	 * Set the current value for the specified sensor; timestamp will be that generated by the implementor at the time the request is received
	 * this will not be the time the value was observed at the sensor.
	 * @param apiKey
	 * @param sensorName
	 * @param currentValue
	 * @throws DataSecurityException
	 * @throws DataConnectorException
	 */
	void setSensorCurrentValue(String apiKey, String sensorName, String currentValue) throws DataSecurityException, DataConnectorException;
	
	/**
	 * Set multiple values for the specified sensor
	 * @param apiKey
	 * @param sensorName
	 * @param values
	 * @param currentValue
	 * @throws DataSecurityException
	 * @throws DataConnectorException
	 */
	void addSensorValues(String apiKey, String sensorName, Set<SensorValue> values, String currentValue) throws DataSecurityException, DataConnectorException;
	
	/**
	 * Gets the average value of the specified sensor over the requested time period.
	 * This should only work for sensors that store numerical values; any implementation of this method should be fault tolerant
	 * and therefore must cope with sensor values that aren't numeric in a graceful way (i.e. exclude them from the average calculation)
	 * @param apiKey
	 * @param sensorName
	 * @param fromTime
	 * @param toTime
	 * @return
	 * @throws DataSecurityException
	 * @throws DataConnectorException
	 */
	Double getAverageSensorValue(String apiKey, String sensorName, Date fromTime, Date toTime) throws DataSecurityException, DataConnectorException;
	
	/**
	 * Set the latest value of the specified sensor
	 * @param apiKey
	 * @param sensorName
	 * @return
	 * @throws DataSecurityException
	 * @throws DataConnectorException
	 */
	SensorOutputValue getLatestSensorValue(String apiKey, String sensorName) throws DataSecurityException, DataConnectorException;
	
	/**
	 * Cleanup the data connector when it is no longer required
	 */
	void destroy();
}

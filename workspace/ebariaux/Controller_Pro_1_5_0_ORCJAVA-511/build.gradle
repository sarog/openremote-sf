apply plugin: "java"
apply plugin: "war"

sourceCompatibility = 1.6
targetCompatibility = 1.6
version = projectVersion

ext {
    testWebApplicationFolder = 'build/testcontainer/war'
    testWebServerBase = 'https://designer-test.openremote.com'
}

configurations {
    staticLibraries
}

repositories {
    // OR repository must be defined first so that specific version of drools-compiler is found
    maven {
        url "http://m2repo.openremote.com/content/groups/public/"
    }
    jcenter();
    mavenCentral()
}

dependencies {
    staticLibraries "org.rxtx:rxtxSerial:2.2:pre2@dll"
    staticLibraries "org.rxtx:librxtxSerial:2.2:pre2@so"
    staticLibraries "org.rxtx:librxtxSerial:2.2:pre2@jnilib"

    compile "org.openremote:or-commons:0.1.0"
    compile "org.openremote:or-security:0.2.0"
    compile "org.openremote:or-logging:0.1.0"
    
    compile "org.rxtx:rxtx:2.2:pre2"
    compile "org.cybergarage.upnp:cybergarage-upnp:1.7.0"
    
    compile "antlr:antlr:$antlrVersion"
    compile "org.antlr:antlr-runtime:$antlrRuntimeVersion"
    compile "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
    compile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
    compile "commons-beanutils:commons-beanutils:$commonsBeanUtilsVersion"
    compile "org.apache.commons:commons-exec:$commonsExecVersion"
    compile "commons-fileupload:commons-fileupload:$commonsFileuploadVersion"
    compile "commons-io:commons-io:$commonsIoVersion"
    compile "commons-lang:commons-lang:$commonsLangVersion"
    compile "commons-net:commons-net:$commonsNetVersion"

    compile ("org.drools:drools-compiler:$droolsVersion:patched")
    compile "org.drools:drools-core:$droolsVersion"
    compile "org.drools:drools-api:$droolsVersion"
    // We need a specific patched version of drools-compiler,
    // make sure "std" version is not included by transitive dependencies
    compile ("org.drools:drools-decisiontables:$droolsVersion") {
      exclude module: 'drools-compiler'
    }
    compile ("org.drools:drools-templates:$droolsVersion") {
      exclude module: 'drools-compiler'
    }

    compile "org.eclipse.jdt.core.compiler:ecj:$ecjVersion"
    compile "net.sf.flexjson:flexjson:$flexjsonVersion"
    compile "org.apache.httpcomponents:httpclient:$httpclientVersion"
    compile "jaxen:jaxen:1.1-beta-9"
    compile "jdom:jdom:$jdomVersion"
    compile "org.owfs:jowfsclient:$jowfsclientVersion"
    compile "com.jayway.jsonpath:json-path:$jsonpathVersion"
    compile "org.zeromq:jzmq:$jzmqVersion" // Not sure what version we're using, seems older
    compile "log4j:log4j:$log4jVersion"
    compile "org.mvel:mvel2:$mvel2Version"
    compile "org.quartz-scheduler:quartz:$quartzVersion"
    compile "org.restlet.jse:org.restlet:$restletVersion"
    compile "org.restlet.jse:org.restlet.ext.json:$restletVersion"
    compile "org.rrd4j:rrd4j:$rrd4jVersion"
    compile "com.luckycatlabs:SunriseSunsetCalculator:$sunriseSunsetVersion" // Upgrade from 1.0 to 1.1
    
    compile "org.springframework:spring:$springVersion"
    compile "org.springframework.security:spring-security-core:$springSecurityVersion"


    // These dependencies were in controller
    // but not sure they're still required
//    compile files("lib/json/json-20110113.jar")
//    compile "jstl:jstl:1.1.2"
//    compile taglibs:standard:1.1.2"

    providedCompile "javax.servlet:servlet-api:$servletVersion"
    providedCompile "javax.servlet.jsp:jsp-api:$jspVersion"

    testCompile "org.dbunit:dbunit:$dbunitVersion"
    testCompile "httpunit:httpunit:$httpunitVersion"
    testCompile "org.mortbay.jetty:jetty:$jettyVersion"
    testCompile "junit:junit:$junitVersion"
		testCompile "org.mockito:mockito-core:$mockitoVersion"
}

task prepareTestFolder(type: Copy, dependsOn: war) {
    description 'Creates an exploded web application folder, with test specific configuration files and test fixtures included'
    destinationDir = new File("$testWebApplicationFolder")
    outputs.dir destinationDir
    
    with war
    from('src/test/java') {
        include '**/*.xml'
        include '**/*.xls'
        include '**/*.csv'
        include '**/*.drl'
        into ('WEB-INF/classes')
    }
    from('src/test/webapp') {
        into ('WEB-INF/classes')
    }   
}

war {
    // Make sure configuration files from sources also make it to war
    from('src/main/java') {
        include '**/*.xml'
        into ('WEB-INF/classes')
    }
    
    // Also copy native libraries, getting rid of version information from file names
    into ('WEB-INF/lib/native') {
        from configurations.staticLibraries.files
        rename { it - '-2.2-pre2' }
    }
}

task startTestContainer(dependsOn: [prepareTestFolder, compileTestJava])

startTestContainer.doFirst {
    description 'Start embedded Jetty container with test configuration'
    Properties props = new Properties()
    props.load(new FileInputStream("$testWebApplicationFolder/WEB-INF/classes/config.properties"))

    test.systemProperties = [
        /*
         * Let the unit test JVM know the 'resource.path' configuration property value of the
         * test container's deployed controller.war
         */
        'testcontainer.vm.resource.path':  props['resource.path'],

        /*
         * These properties must be set to correctly resolve in the Spring configuration file.
         * Eventually, this should not rely on a public server but be part of the local test setup.
         */
        'openremote.sync.service.uri' : "$testWebServerBase/beehive/rest/",
        'openremote.remote.command.service.uri' : "$testWebServerBase/ccs/rest/",
        'openremote.controller.id' : '1',
        'openremote.device.discovery.service.uri' : "$testWebServerBase/dds/rest/",

        /*
         * Pass a system property that gives tests that need access to the compiled
         * test class directory (which contains fixture files) as an absolute file path
         */
        'classes.dir' : file("$testWebApplicationFolder/WEB-INF/classes").path
     ] 

    /*
     * Set the test container VM work directory inside the war directory. This ensures
     * relative paths from within test container war's config.properties are resolved
     * within the testcontainer directory structure.
     */
    ant.java(fork: true,
             spawn: true,
             classname: 'org.openremote.controller.jetty.JettyStart',
             classpath: (sourceSets.test.runtimeClasspath + files("$testWebApplicationFolder/WEB-INF/classes")).asPath,
             dir: testWebApplicationFolder) {
                sysproperty(key: 'openremote.sync.service.uri', value : "$testWebServerBase/beehive/rest/")
                sysproperty(key: 'openremote.remote.command.service.uri', value : "$testWebServerBase/ccs/rest/")
                sysproperty(key: 'openremote.controller.id', value : '1')
                sysproperty(key: 'openremote.device.discovery.service.uri', value : "$testWebServerBase/dds/rest/")
    }
}

task stopTestContainer
stopTestContainer.doFirst {
    ant.java(classname : 'org.openremote.controller.jetty.JettyStop',
             classpath : sourceSets.test.runtimeClasspath.asPath)
}

test.dependsOn startTestContainer
test.finalizedBy stopTestContainer
test {
    /*
     * Run JUnit VM with the same work directory as the test container war. Notice
     * the tests themselves aren't actually running inside a container. This is
     * temporary until the search paths for resources have been sorted out to not mix
     * the test container and junit test resource files.
     */
    workingDir = new File(testWebApplicationFolder)
    classpath = sourceSets.test.runtimeClasspath + files("$testWebApplicationFolder/WEB-INF/classes")
    
    scanForTestClasses = false
    include '**/AllTests.class'
}

task controller(type: Zip, dependsOn: assemble) {
    description 'Creates a zip distribution of the controller runtime, including Tomcat'

    from('runtime/apache-tomcat-6.0.18') {
		    into project.name
		}
 		into("$project.name/webapps/controller") {
		    with war
		}
}